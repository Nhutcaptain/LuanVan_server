import { Request, Response } from 'express';
import path from 'path';
import { createObjectCsvWriter } from 'csv-writer';
import { exec } from 'child_process';
import fs from 'fs';
import { diagnoseFromSymptoms, extractSymptoms } from '../config/azureOpenaiClient';
import { adviseFromDiagnosis, generateFullHealthResponse } from '../config/services/gpt.service';
import { getSuggestDoctors } from './doctorController';

// üìÅ ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c chatbot
const baseDir = path.join(__dirname, '..', '..', '..', 'chatbot');
const filePath = path.join(baseDir, 'data.csv');
const trainPath = path.join(baseDir, 'train.py');
const pythonPath = path.join(baseDir, 'venv', 'Scripts', 'python.exe');

// C·∫•u h√¨nh ghi file CSV
const csvWriter = createObjectCsvWriter({
  path: filePath,
  header: [
    { id: 'symptoms', title: 'symptoms' },
    { id: 'diagnosis', title: 'diagnosis' }
  ],
  append: true,
  alwaysQuote: true
});

//  H√†m chu·∫©n ho√° chu·ªói: xo√° kho·∫£ng tr·∫Øng th·ª´a
const cleanText = (text: string): string => {
  return text.trim().replace(/\s+/g, ' ').toLowerCase();
};

export const addSymptom = async (req: Request, res: Response) => {
  let { symptoms, diagnosis } = req.body;

  if (!symptoms || !diagnosis) {
    return res.status(400).json({ message: 'Thi·∫øu tri·ªáu ch·ª©ng ho·∫∑c ch·∫©n ƒëo√°n.' });
  }

  // Chu·∫©n ho√° ƒë·∫ßu v√†o
  symptoms = cleanText(symptoms);
  diagnosis = cleanText(diagnosis);

  // Ki·ªÉm tra t·ªáp t·ªìn t·∫°i
  if (!fs.existsSync(filePath)) {
    return res.status(500).json({ message: `Kh√¥ng t√¨m th·∫•y file CSV: ${filePath}` });
  }

  if (!fs.existsSync(pythonPath)) {
    return res.status(500).json({ message: `Kh√¥ng t√¨m th·∫•y Python trong m√¥i tr∆∞·ªùng ·∫£o: ${pythonPath}` });
  }

  // Ki·ªÉm tra xem d√≤ng ƒë√£ t·ªìn t·∫°i ch∆∞a (tr√°nh ghi tr√πng)
  const existingData = fs.readFileSync(filePath, 'utf-8').split('\n').map(line => line.trim());
  const newLine = `"${symptoms}","${diagnosis}"`;

  if (existingData.includes(newLine)) {
    return res.status(200).json({ message: 'Tri·ªáu ch·ª©ng v√† ch·∫©n ƒëo√°n ƒë√£ t·ªìn t·∫°i trong d·ªØ li·ªáu.' });
  }

  try {
    // Ghi v√†o CSV
    await csvWriter.writeRecords([{ symptoms, diagnosis }]);
    console.log('Ghi v√†o CSV th√†nh c√¥ng.');

    // G·ªçi train.py b·∫±ng Python trong m√¥i tr∆∞·ªùng ·∫£o
    exec(`"${pythonPath}" "${trainPath}"`, (err, stdout, stderr) => {
      if (err) {
        console.error('L·ªói khi train:', err);
        console.error('stderr:', stderr);
        return res.status(500).json({ message: ' ƒê√£ ghi d·ªØ li·ªáu nh∆∞ng train m√¥ h√¨nh th·∫•t b·∫°i.' });
      }

      console.log('Train m√¥ h√¨nh th√†nh c√¥ng:\n', stdout);
      return res.json({ message: 'Ghi d·ªØ li·ªáu v√† train l·∫°i m√¥ h√¨nh th√†nh c√¥ng.' });
    });
  } catch (error) {
    console.error('L·ªói ghi CSV:', error);
    return res.status(500).json({ message: 'Ghi d·ªØ li·ªáu th·∫•t b·∫°i.' });
  }
};

const userSymptomsMap = new Map<string, string[]>(); 

const updateUserSymptoms = (userId: string, newSymptoms: string): string[] => {
  const oldSymptoms = userSymptomsMap.get(userId) || [];
  const newList = newSymptoms.split(",").map(s => s.trim()).filter(Boolean);
  const combined = [...oldSymptoms, ...newList];
  const unique = [...new Set(combined)];
  userSymptomsMap.set(userId, unique);
  return unique;
}

export const getDiagnosis = async (req: Request, res: Response) => {
  try {
    const { userId, description } = req.body;

    if (!userId || !description) {
      return res.status(400).json({ error: "Thi·∫øu userId ho·∫∑c description" });
    }

    // 1. Tr√≠ch xu·∫•t tri·ªáu ch·ª©ng t·ª´ m√¥ t·∫£
    const extracted = await extractSymptoms(description);

    // 2. G·ªôp tri·ªáu ch·ª©ng c≈© v√† m·ªõi
    const updatedSymptoms = await updateUserSymptoms(userId, extracted);
    const normalized = updatedSymptoms.join(", ");

    // 3. G·ªçi ML model
    const mlResponse = await fetch('http://localhost:5001/predict', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ symptoms: normalized })
    });

    const mlResult = await mlResponse.json();
    const mlDiagnosis = mlResult.prediction?.trim().toLowerCase();

    // 4. G·ªçi GPT ƒë·ªÉ ch·∫©n ƒëo√°n
    // const gptDiagnosisRaw = await diagnoseFromSymptoms(description);
    // const gptDiagnosis = gptDiagnosisRaw.trim().toLowerCase();

    // // 5. So s√°nh v√† ch·ªçn k·∫øt qu·∫£
    // let finalDiagnosis = gptDiagnosis;
    // let source = "gpt";

    // if (mlDiagnosis && mlDiagnosis !== "unknown" && mlDiagnosis === gptDiagnosis) {
    //   finalDiagnosis = mlDiagnosis;
    //   source = "ml-model";
    // }

    // 6. T·∫°o ph·∫£n h·ªìi t·ª± nhi√™n
    const fullResponse = await generateFullHealthResponse(mlDiagnosis, normalized);
    const doctors = await getSuggestDoctors(mlDiagnosis);

    return res.json({
      response: fullResponse,
      diagnosis: mlDiagnosis,
      source: 'ml-model',
      symptoms: updatedSymptoms,
      comparison: {
        ml: mlDiagnosis,
      },
      doctors: doctors
    });

  } catch (error) {
    console.error('L·ªói ch·∫©n ƒëo√°n:', error);
    return res.status(500).json({ error: 'L·ªói h·ªá th·ªëng' });
  }
};
